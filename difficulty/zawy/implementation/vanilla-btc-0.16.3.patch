diff --git a/configure.ac b/configure.ac
index 46a9ac105..e02fc98f5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -221,6 +221,19 @@ AC_ARG_ENABLE([werror],
     [enable_werror=$enableval],
     [enable_werror=no])
 
+# Enable or Disable Using Difficulty/Zawy
+AC_ARG_WITH([wdifficultyzawy],
+    [AS_HELP_STRING([--with-difficulty-zawy],
+                    [Use Custom Difficilty Adjustment (Zawy) (default is yes)])],
+    [use_difficulty_zawy=$enableval],
+    [use_difficulty_zawy=yes])
+
+# Check the parameter and set the directive
+AC_MSG_CHECKING([whether to use difficulty zawy])
+AM_CONDITIONAL([USE_DIFFICULTY_ZAWY], [test x$use_difficulty_zawy = xyes])
+AC_DEFINE_UNQUOTED([USE_DIFFICULTY_ZAWY],[1],[Define to 1 to enable the difficulty/zawy addon])
+AC_MSG_RESULT($use_difficulty_zawy)
+
 AC_LANG_PUSH([C++])
 AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR="-Werror"],[CXXFLAG_WERROR=""])
 
@@ -1318,6 +1331,7 @@ esac
 
 echo
 echo "Options used to compile and link:"
+echo "  with Zawy     = $use_difficulty_zawy"
 echo "  with wallet   = $enable_wallet"
 echo "  with gui / qt = $bitcoin_enable_qt"
 if test x$bitcoin_enable_qt != xno; then
diff --git a/src/Makefile.am b/src/Makefile.am
index 4fbd605d9..9f6675331 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -176,6 +176,9 @@ BITCOIN_CORE_H = \
   zmq/zmqnotificationinterface.h \
   zmq/zmqpublishnotifier.h
 
+if USE_DIFFICULTY_ZAWY
+  BITCOIN_CORE_H += addons/difficulty/zawy/zawy.h
+endif
 
 obj/build.h: FORCE
 	@$(MKDIR_P) $(builddir)/obj
@@ -236,6 +239,9 @@ libbitcoin_zmq_a_SOURCES = \
   zmq/zmqpublishnotifier.cpp
 endif
 
+if USE_DIFFICULTY_ZAWY
+  libbitcoin_server_a_SOURCES += addons/difficulty/zawy/zawy.cpp
+endif
 
 # wallet: shared between bitcoind and bitcoin-qt, but only linked
 # when wallet enabled
diff --git a/src/pow.cpp b/src/pow.cpp
index 929ea26a0..e70d521ce 100644
--- a/src/pow.cpp
+++ b/src/pow.cpp
@@ -5,11 +5,22 @@
 
 #include <pow.h>
 
+#ifdef USE_DIFFICULTY_ZAWY
+#include <addons/difficulty/zawy/zawy.h>
+#endif
+
 #include <arith_uint256.h>
 #include <chain.h>
 #include <primitives/block.h>
 #include <uint256.h>
 
+#ifdef USE_DIFFICULTY_ZAWY
+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)
+{
+    assert(pindexLast != nullptr);
+    return LwmaGetNextWorkRequired(pindexLast, pblock, params);
+}
+#else
 unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)
 {
     assert(pindexLast != nullptr);
@@ -45,6 +56,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead
 
     return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);
 }
+#endif
 
 unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)
 {
